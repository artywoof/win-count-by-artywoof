# Win Count Backup Script
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå

param(
    [string]$BackupPath = ".\backups",
    [switch]$IncludeNodeModules = $false
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ backup
$timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
$backupName = "backup-$timestamp"
$fullBackupPath = Join-Path $BackupPath $backupName

Write-Host "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á backup: $backupName" -ForegroundColor Green

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå backup
New-Item -ItemType Directory -Force -Path $fullBackupPath | Out-Null

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
$importantItems = @(
    "package.json",
    "bun.lock",
    "tsconfig.json",
    "svelte.config.js",
    "vite.config.js",
    "vite.config.ts",
    "tailwind.config.js",
    "postcss.config.js",
    "playwright.config.ts",
    "global.d.ts",
    "src",
    "static",
    "src-tauri",
    "ai-sync-api",
    "tests",
    "README.md",
    "launch.json",
    "presets",
    "index.ts",
    "project-scan.ts"
)

# Optional: ‡∏£‡∏ß‡∏° node_modules ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏
if ($IncludeNodeModules) {
    $importantItems += "node_modules"
}

# Copy ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
foreach ($item in $importantItems) {
    if (Test-Path $item) {
        $destination = Join-Path $fullBackupPath $item
        
        if (Test-Path $item -PathType Container) {
            Write-Host "‡∏Å‡∏≥‡∏•‡∏±‡∏á copy ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: $item" -ForegroundColor Yellow
            Copy-Item -Path $item -Destination $destination -Recurse -Force
        } else {
            Write-Host "‡∏Å‡∏≥‡∏•‡∏±‡∏á copy ‡πÑ‡∏ü‡∏•‡πå: $item" -ForegroundColor Yellow
            $destinationDir = Split-Path $destination -Parent
            if (-not (Test-Path $destinationDir)) {
                New-Item -ItemType Directory -Force -Path $destinationDir | Out-Null
            }
            Copy-Item -Path $item -Destination $destination -Force
        }
    } else {
        Write-Host "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: $item" -ForegroundColor Red
    }
}

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå backup info
$backupInfo = @{
    "backup_date" = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "backup_name" = $backupName
    "project_name" = "win-count-by-artywoof"
    "items_backed_up" = $importantItems
    "include_node_modules" = $IncludeNodeModules
    "total_size_mb" = [math]::Round((Get-ChildItem $fullBackupPath -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB, 2)
}

$backupInfo | ConvertTo-Json -Depth 3 | Out-File -FilePath (Join-Path $fullBackupPath "backup-info.json") -Encoding UTF8

Write-Host ""
Write-Host "‚úÖ Backup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!" -ForegroundColor Green
Write-Host "üìÅ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: $fullBackupPath" -ForegroundColor Cyan
Write-Host "üìä ‡∏Ç‡∏ô‡∏≤‡∏î: $($backupInfo.total_size_mb) MB" -ForegroundColor Cyan
Write-Host "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: $($backupInfo.backup_date)" -ForegroundColor Cyan

# ‡∏™‡∏£‡πâ‡∏≤‡∏á ZIP file
$zipPath = "$fullBackupPath.zip"
Write-Host "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ZIP..." -ForegroundColor Yellow
Compress-Archive -Path $fullBackupPath -DestinationPath $zipPath -Force
Write-Host "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ZIP ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: $zipPath" -ForegroundColor Green

Write-Host ""
Write-Host "üéâ Backup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!" -ForegroundColor Green
