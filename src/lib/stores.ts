import { writable } from 'svelte/store';
import type { Writable } from 'svelte/store';

// --- ‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô ---

// --- 1. ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (General App State) ---
export const win: Writable<number> = writable(0);
export const goal: Writable<number> = writable(10);
export const showGoal: Writable<boolean> = writable(true);
export const showCrown: Writable<boolean> = writable(true);
export const presets: Writable<string[]> = writable(['Default']);
export const currentPreset: Writable<string> = writable('Default');
export const presetName: Writable<string> = writable('Default');
export const showSettingsModal: Writable<boolean> = writable(false);
export const showPresetModal: Writable<boolean> = writable(false);

// --- 2. ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î (Hotkey Settings) - ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ! ---

/**
 * ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î (Keybind)
 * @property {string} code - ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° (‡πÄ‡∏ä‡πà‡∏ô 'KeyA', 'Digit1', 'NumpadEnter')
 * @property {boolean} alt - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Alt ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @property {boolean} shift - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Shift ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @property {boolean} ctrl - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Control ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @property {boolean} meta - ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Meta (Windows/Command) ‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
export interface Keybind {
  code: string;
  alt: boolean;
  shift: boolean;
  ctrl: boolean;
  meta: boolean;
}

/**
 * ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (Action) ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡∏á
 */
export interface HotkeyAction {
  label: string;
  description: string;
  defaultKeybind: Keybind;
  currentKeybind: Keybind;
}

/**
 * ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
interface HotkeySettings {
  enabled: boolean;
  actions: {
    increment: HotkeyAction;
    decrement: HotkeyAction;
    increment10: HotkeyAction;
    decrement10: HotkeyAction;
    reset: HotkeyAction;
    toggleGoal: HotkeyAction;
    [key: string]: HotkeyAction; // Index signature for dynamic access
  };
}

// ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const defaultHotkeys: HotkeySettings = {
  enabled: true,
  actions: {
    increment: {
      label: 'üî∫ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ (+1)',
      description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡∏•‡∏∞ 1',
      defaultKeybind: { code: 'Equal', alt: true, shift: false, ctrl: false, meta: false },
      currentKeybind: { code: 'Equal', alt: true, shift: false, ctrl: false, meta: false },
    },
    decrement: {
      label: 'üîª ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ (-1)',
      description: '‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡∏•‡∏∞ 1',
      defaultKeybind: { code: 'Minus', alt: true, shift: false, ctrl: false, meta: false },
      currentKeybind: { code: 'Minus', alt: true, shift: false, ctrl: false, meta: false },
    },
    increment10: {
      label: '‚¨ÜÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ (+10)',
      description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡∏•‡∏∞ 10',
      defaultKeybind: { code: 'Equal', alt: true, shift: true, ctrl: false, meta: false },
      currentKeybind: { code: 'Equal', alt: true, shift: true, ctrl: false, meta: false },
    },
    decrement10: {
      label: '‚¨áÔ∏è ‡∏•‡∏î‡∏Ñ‡πà‡∏≤ (-10)',
      description: '‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡∏•‡∏∞ 10',
      defaultKeybind: { code: 'Minus', alt: true, shift: true, ctrl: false, meta: false },
      currentKeybind: { code: 'Minus', alt: true, shift: true, ctrl: false, meta: false },
    },
    reset: {
      label: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤',
      description: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡∏ä‡∏±‡∏¢‡∏ä‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0',
      defaultKeybind: { code: '', alt: false, shift: false, ctrl: false, meta: false }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      currentKeybind: { code: '', alt: false, shift: false, ctrl: false, meta: false },
    },
    toggleGoal: {
      label: 'üéØ ‡∏™‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢',
      description: '‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢',
      defaultKeybind: { code: '', alt: false, shift: false, ctrl: false, meta: false }, // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      currentKeybind: { code: '', alt: false, shift: false, ctrl: false, meta: false },
    },
  },
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Store ‡∏Ç‡∏≠‡∏á Hotkey
function createHotkeyStore() {
  const { subscribe, set, update } = writable<HotkeySettings>(JSON.parse(JSON.stringify(defaultHotkeys))); // ‡πÉ‡∏ä‡πâ deep copy

  return {
    subscribe,
    set,
    update,
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    resetToDefaults: () => {
      console.log('stores.ts: resetToDefaults called!');
      set(JSON.parse(JSON.stringify(defaultHotkeys))); // ‡πÉ‡∏ä‡πâ deep copy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô reference bug
    },
  };
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ export ‡∏ï‡∏±‡∏ß Store ‡∏´‡∏•‡∏±‡∏Å
export const hotkeySettings = createHotkeyStore();


// --- 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ (Helper Functions) ---

/**
 * ‡πÅ‡∏õ‡∏•‡∏á Object ‡∏Ç‡∏≠‡∏á Keybind ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô String ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô 'Alt + Shift + A')
 * @param keybind - Object ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á
 * @returns - String ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏•‡∏±‡∏î
 */
export function keybindToString(keybind: Partial<Keybind>): string {
  if (!keybind || !keybind.code) {
    return '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤';
  }

  const parts: string[] = [];
  if (keybind.ctrl) parts.push('Ctrl');
  if (keybind.alt) parts.push('Alt');
  if (keybind.shift) parts.push('Shift');
  if (keybind.meta) parts.push('Meta');

  // ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
  const keyDisplayMap: { [key: string]: string } = {
    'Equal': '=',
    'Minus': '-',
    'Space': 'Space',
    'ArrowUp': 'Up',
    'ArrowDown': 'Down',
    'ArrowLeft': 'Left',
    'ArrowRight': 'Right',
  };

  const displayKey = keyDisplayMap[keybind.code] || keybind.code.replace('Key', '').replace('Digit', '');
  parts.push(displayKey);

  return parts.join(' + ');
}

/**
 * ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Keybind ‡∏™‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param kb1 - Keybind ‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà 1
 * @param kb2 - Keybind ‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà 2
 * @returns - true ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô, false ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô
 */
export function keybindEquals(kb1: Partial<Keybind>, kb2: Partial<Keybind>): boolean {
    if (!kb1 || !kb2) return false;
    return (
        kb1.code === kb2.code &&
        !!kb1.alt === !!kb2.alt &&
        !!kb1.shift === !!kb2.shift &&
        !!kb1.ctrl === !!kb2.ctrl &&
        !!kb1.meta === !!kb2.meta
    );
}
